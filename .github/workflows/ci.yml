name: CI
on: 
  push:
    branches:
      - main
      - 'release/**'

jobs:
  publish:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '21'
        registry-url: 'https://npm.pkg.github.com'
        scope: '@rymopl'
        cache: 'npm'
        cache-dependency-path: package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Run unit tests
      run: npm run test:unit

    - name: Bump version and push tag
      if: github.ref == 'refs/heads/main'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        npm version patch -m "Bump package version to %s [skip ci]"
        git push --follow-tags

    - name: Create alpha package if release branch
      if: contains(github.ref, 'release')
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        # npm version prerelease --preid=alpha -m "Bump package version to %s [skip ci]"
        # git push --follow-tags


        CURRENT_VERSION=$(npm version | grep @rymopl | sed 's/.*: "\(.*\)",/\1/')
        PUBLISHED_VERSIONS=$(npm view @rymopl/ci-test versions --json)
        echo "Published versions: ${PUBLISHED_VERSIONS}"
    
        LAST_ALPHA_VERSION=$(echo ${PUBLISHED_VERSIONS} | jq -r '.[]' | grep -E "${CURRENT_VERSION}-alpha.[0-9]+" | sort -V | tail -n 1)
        echo "Last alpha version: ${LAST_ALPHA_VERSION}"
    
        if [ -z "${LAST_ALPHA_VERSION}" ]; then
          NEW_ALPHA_VERSION="${CURRENT_VERSION}-alpha.0"
        else
          NEW_ALPHA_VERSION=$(echo ${LAST_ALPHA_VERSION} | awk -F. '{print $1"."$2"."$3"-alpha."$4+1}')
        fi
    
        echo "New alpha version: ${NEW_ALPHA_VERSION}"
        npm version ${NEW_ALPHA_VERSION} -m "Bump alpha package version to %s [skip ci]"
        git push --follow-tags
      env:
        NODE_AUTH_TOKEN: ${{ secrets.CI_TOKEN_READ_WRITE }}

    - name: Create beta package if hotfix branch
      if: contains(github.ref, 'hotfix')
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        npm version prerelease --preid=beta -m "Bump package version to %s [skip ci]"
        git push --follow-tags

    - name: Debug environment variables
      run: env
      
    - name: Build library
      run: npm run build

    - name: Publish package
      run: npm publish
      env:
        NODE_AUTH_TOKEN: ${{ secrets.CI_TOKEN_READ_WRITE }}